version: '3.8'

services:
  nginx:
    build:
      context: ./
      dockerfile: DockerfileNginx
    ports:
      - "80:80"
    depends_on:
      - web
    volumes:
      - ./media:/media
      - ./static:/static

  web:
    build:
      context: ./
      dockerfile: Dockerfile
      target: prod
    environment:
      - SECRET_KEY=${SECRET_KEY}
      - DEBUG=${DEBUG}
      - DEV=${DEV}
      - SITE_ID=${SITE_ID}
      - SQL_HOST=${SQL_HOST}
      - MAIN_DOMAIN=${MAIN_DOMAIN}
      - HTTPS=${HTTPS}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
      - SQL_ENGINE=${SQL_ENGINE}
      - SQL_DATABASE_NAME=${SQL_DATABASE_NAME}
      - SQL_USER=${SQL_USER}
      - SQL_PASSWORD=${SQL_PASSWORD}
      - SQL_PORT=${SQL_PORT}
      - DJANGO_SUPERUSER_USERNAME=${DJANGO_SUPERUSER_USERNAME}
      - DJANGO_SUPERUSER_PASSWORD=${DJANGO_SUPERUSER_PASSWORD}
      - DJANGO_SUPERUSER_EMAIL=${DJANGO_SUPERUSER_EMAIL}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
    volumes:
      - ./:/srv
      - ./media:/srv/media
      - ./static:/srv/static
    ports:
      - "8000:8000"
    restart: always
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy

  redis:
    image: redis:alpine
    hostname: redis
    restart: always
    ports:
      - "6379:6379"
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 2s
      retries: 10

  worker:
    build:
      context: .
    hostname: worker
    entrypoint: celery
    command: -A config worker --loglevel=INFO
    volumes:
      - ./:/srv
      - ./media:/srv/media
      - ./static:/srv/static
    links:
      - redis
    environment:
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
    depends_on:
      redis:
        condition: service_healthy
      web:
        condition: service_started

  flower:
    image: mher/flower
    hostname: flower
    command: celery -A celery flower
    environment:
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
    ports:
      - "5555:5555"
    volumes:
      - ./:/srv
      - ./media:/srv/media
      - ./static:/srv/static
    links:
      - redis
    depends_on:
      web:
        condition: service_started
      worker:
        condition: service_started
      redis:
        condition: service_healthy


  postgres:
    image: postgres
    restart: always
    environment:
      - POSTGRES_DB=${SQL_DATABASE_NAME}
      - POSTGRES_USER=${SQL_USER}
      - POSTGRES_PASSWORD=${SQL_PASSWORD}
      - POSTGRES_PORT=${SQL_PORT}
    ports:
      - "5432:5432"
    volumes:
      - ./data/postgres/:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${SQL_USER} -d ${SQL_DATABASE_NAME} -h localhost" ]
      interval: 5s
      timeout: 2s
      retries: 10

