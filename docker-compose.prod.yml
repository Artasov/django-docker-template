version: '3.8'

services:
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    depends_on:
      web:
        condition: service_healthy
      flower:
        condition: service_started
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
    networks:
      - net

  postgres:
    hostname: postgres
    image: postgres:alpine
    restart: always
    environment:
      - POSTGRES_DB=${SQL_DATABASE_NAME}
      - POSTGRES_USER=${SQL_USER}
      - POSTGRES_PASSWORD=${SQL_PASSWORD}
      - POSTGRES_PORT=${SQL_PORT}
    ports:
      - "5432:5432"
    volumes:
      - ./data/postgres/:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${SQL_USER} -d ${SQL_DATABASE_NAME} -h localhost" ]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 5s
    networks:
      - net

  redis:
    hostname: redis
    image: redis:alpine
    restart: always
    ports:
      - "6379:6379"
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 5s
    networks:
      - net

  web:
    hostname: web
    build:
      context: ./
      dockerfile: Dockerfile
      target: prod
    environment:
      - SECRET_KEY=${SECRET_KEY}
      - DEBUG=${DEBUG}
      - DEV=${DEV}
      - SITE_ID=${SITE_ID}
      - SQL_HOST=${SQL_HOST}
      - MAIN_DOMAIN=${MAIN_DOMAIN}
      - HTTPS=${HTTPS}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
      - SQL_ENGINE=${SQL_ENGINE}
      - SQL_DATABASE_NAME=${SQL_DATABASE_NAME}
      - SQL_USER=${SQL_USER}
      - SQL_PASSWORD=${SQL_PASSWORD}
      - SQL_PORT=${SQL_PORT}
      - DJANGO_SUPERUSER_USERNAME=${DJANGO_SUPERUSER_USERNAME}
      - DJANGO_SUPERUSER_PASSWORD=${DJANGO_SUPERUSER_PASSWORD}
      - DJANGO_SUPERUSER_EMAIL=${DJANGO_SUPERUSER_EMAIL}
      - REDIS_URL=${REDIS_URL}
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY}
      - TZ=${TZ}
    volumes:
      - ./:/srv
    ports:
      - "8000:8000"
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "wget --quiet --tries=1 --spider http://localhost:8000/ || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 5s
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - net

  minio:
    hostname: minio
    image: minio/minio
    restart: always
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
    command: server /data --console-address :9001
    volumes:
      - ./data/minio/data:/data
      - ./data/minio/config:/root/.minio
    networks:
      - net
    healthcheck:
      test: ["CMD", "echo", "'MinIO is up'"]
      interval: 5s
      timeout: 4s
      retries: 10
      start_period: 10s

  worker:
    hostname: worker
    build:
      context: .
      dockerfile: Dockerfile
    entrypoint: celery
    command: -A config worker --loglevel=warning --task-events -E
    volumes:
      - ./:/srv
    links:
      - redis
    environment:
      - POSTGRES_DB=${SQL_DATABASE_NAME}
      - POSTGRES_USER=${SQL_USER}
      - POSTGRES_PASSWORD=${SQL_PASSWORD}
      - POSTGRES_PORT=${SQL_PORT}
      - CELERY_RESULT_BACKEND=${REDIS_URL}
      - CELERY_BROKER_URL=${REDIS_URL}
      - REDIS_CACHE_URL=${REDIS_CACHE_URL}
      - REDIS_URL=${REDIS_URL}
      - TZ=${TZ}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      web:
        condition: service_healthy
    networks:
      - net

  flower:
    hostname: flower
    image: mher/flower
    command: celery -A celery flower --loglevel=warning --url-prefix=flower --basic_auth=${FLOWER_DEFAULT_USER}:${FLOWER_DEFAULT_PASS}
    environment:
      - CELERY_RESULT_BACKEND=${REDIS_URL}
      - CELERY_BROKER_URL=${REDIS_URL}
      - TZ=${TZ}
    ports:
      - "5555:5555"
    volumes:
      - ./:/srv
    links:
      - redis
    depends_on:
      web:
        condition: service_healthy
      worker:
        condition: service_started
      redis:
        condition: service_healthy
    networks:
      - net

  celerybeat:
    hostname: celerybeat
    build:
      dockerfile: Dockerfile
    entrypoint: celery
    command: -A config beat --loglevel=warning --schedule=/srv/celerybeat-schedule --pidfile=/srv/celerybeat.pid
    volumes:
      - ./:/srv
    depends_on:
      web:
        condition: service_healthy
      worker:
        condition: service_started
      redis:
        condition: service_healthy
    environment:
      - CELERY_RESULT_BACKEND=${REDIS_URL}
      - CELERY_BROKER_URL=${REDIS_URL}
      - TZ=${TZ}
    networks:
      - net

networks:
  net:
    driver: bridge